2023-04-05 13:26:33,503 ERROR [mpl] [<input>:1] - startService
2023-04-05 13:27:55,427 INFO [mpl] [<input>:1] - ee
2023-04-05 13:29:13,467 INFO [mpl] [apps.py:13] - startService
2023-04-05 15:04:58,849 INFO [mpl] [apps.py:13] - startService
2023-04-05 15:06:24,519 INFO [mpl] [MPListenerWorker.py:32] - MPListener_EqpCode=ME076
2023-04-05 15:06:28,067 INFO [mpl] [MPLWorker.py:31] - MPLWorkerStart
2023-04-05 15:06:28,222 INFO [mpl] [MPLWorker.py:32] - <?xml version="1.0" encoding="utf-8" standalone="yes"?>
<message command="EAPFDC_TOOLEVENT" from="ME076" to="FDC" timestamp="2023-04-03 15:44:14" EQUIPMENT_ID="ME076" xmlns="http://http://www.wisol.co.kr/schema/eap">
  <params>
    <para name="LOT">NAHCF0550^00_MP_RECIPE|LOT|CF4_1.3_40^A^SR806DX20F05^R7TCWLP^OP0D002010</para>
    <para name="VID">9101^9103^9001^9121^9122^9141^9131^9142</para>
    <para name="DATA">NULL^NULL^NULL^1^NAHCF0550^PM2^5^CF4_1.3_40</para>
    <para name="CEID">25002</para>
  </params>
</message> 
2023-04-05 15:06:44,443 INFO [mpl] [MCPWorker.py:77] - mcpSaveWorkStart
2023-04-05 15:06:46,070 INFO [mpl] [MCPWorker.py:131] - mcpSaveWorkEnd
2023-04-05 15:06:50,560 INFO [mpl] [MPLWorker.py:38] - MPLWorkerEnd
2023-04-05 15:07:48,840 INFO [mpl] [apps.py:13] - startService
2023-04-05 15:07:50,038 INFO [mpl] [MPListenerWorker.py:32] - MPListener_EqpCode=ME076
2023-04-05 15:07:53,392 INFO [mpl] [MPLWorker.py:31] - MPLWorkerStart
2023-04-05 15:07:53,392 INFO [mpl] [MPLWorker.py:32] - <?xml version="1.0" encoding="utf-8" standalone="yes"?>
<message command="EAPFDC_TOOLEVENT" from="ME076" to="FDC" timestamp="2023-04-03 15:44:14" EQUIPMENT_ID="ME076" xmlns="http://http://www.wisol.co.kr/schema/eap">
  <params>
    <para name="LOT">NAHCF0550^00_MP_RECIPE|LOT|CF4_1.3_40^A^SR806DX20F05^R7TCWLP^OP0D002010</para>
    <para name="VID">9101^9103^9001^9121^9122^9141^9131^9142</para>
    <para name="DATA">NULL^NULL^NULL^1^NAHCF0550^PM2^5^CF4_1.3_40</para>
    <para name="CEID">25002</para>
  </params>
</message> 
2023-04-05 15:08:04,617 INFO [mpl] [MCPWorker.py:77] - mcpSaveWorkStart
2023-04-05 15:08:07,060 INFO [mpl] [MCPWorker.py:131] - mcpSaveWorkEnd
2023-04-05 15:08:07,063 INFO [mpl] [MPLWorker.py:38] - MPLWorkerEnd
2023-04-05 15:37:21,223 INFO [mpl] [apps.py:13] - startService
2023-04-05 15:37:48,509 INFO [mpl] [apps.py:13] - startService
2023-04-05 15:38:59,670 INFO [mpl] [apps.py:13] - startService
2023-04-05 15:39:05,436 INFO [mpl] [MPLProcessWorker.py:50] - mplPWorker Start
2023-04-05 15:39:05,436 INFO [mpl] [MPLProcessWorker.py:50] - mplPWorker Start
2023-04-05 15:39:20,917 INFO [mpl] [apps.py:13] - startService
2023-04-05 15:39:25,448 INFO [mpl] [MPLProcessWorker.py:50] - mplPWorker Start
2023-04-05 15:39:25,448 INFO [mpl] [MPLProcessWorker.py:50] - mplPWorker Start
2023-04-05 15:39:54,405 INFO [mpl] [apps.py:13] - startService
2023-04-05 15:39:55,129 ERROR [mpl] [ActiveMPListener.py:68] - MPListener on_error = {cmd=ERROR,headers=[{'content-type': 'text/plain', 'message': 'Already connected.'}],body=org.apache.activemq.transport.stomp.ProtocolException: Already connected.
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompConnect(ProtocolConverter.java:745)
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:254)
	at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:85)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)
	at java.base/java.lang.Thread.run(Thread.java:829)
}
2023-04-05 15:48:33,571 INFO [mpl] [apps.py:13] - startService
2023-04-05 15:48:34,160 INFO [mpl] [MPLProcessWorker.py:108] - processStart Module = 38
2023-04-05 15:48:34,196 ERROR [mpl] [ActiveMPListener.py:68] - MPListener on_error = {cmd=ERROR,headers=[{'content-type': 'text/plain', 'message': 'Already connected.'}],body=org.apache.activemq.transport.stomp.ProtocolException: Already connected.
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompConnect(ProtocolConverter.java:745)
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:254)
	at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:85)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)
	at java.base/java.lang.Thread.run(Thread.java:829)
}
2023-04-05 15:48:36,744 INFO [mpl] [MPLProcessWorker.py:51] - mplPWorker Start
2023-04-05 15:48:36,744 INFO [mpl] [MPLProcessWorker.py:52] - apps.apps_ready=False
2023-04-05 15:49:17,263 INFO [mpl] [apps.py:13] - startService
2023-04-05 15:49:17,962 INFO [mpl] [MPLProcessWorker.py:108] - processStart Module = 38
2023-04-05 15:49:20,566 INFO [mpl] [MPLProcessWorker.py:51] - mplPWorker Start
2023-04-05 15:49:20,567 INFO [mpl] [MPLProcessWorker.py:52] - apps.apps_ready=False
2023-04-05 15:49:21,455 INFO [mpl] [MPLProcessWorker.py:53] - pid =62628
2023-04-05 16:04:54,425 INFO [mpl] [apps.py:13] - startService
2023-04-05 16:04:55,125 INFO [mpl] [MPLProcessWorker.py:103] - processStart Module = 38
2023-04-05 16:04:55,219 ERROR [mpl] [ActiveMPListener.py:68] - MPListener on_error = {cmd=ERROR,headers=[{'content-type': 'text/plain', 'message': 'Already connected.'}],body=org.apache.activemq.transport.stomp.ProtocolException: Already connected.
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompConnect(ProtocolConverter.java:745)
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:254)
	at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:85)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)
	at java.base/java.lang.Thread.run(Thread.java:829)
}
2023-04-05 16:08:09,853 INFO [mpl] [apps.py:13] - startService
2023-04-05 16:08:10,476 INFO [mpl] [MPLProcessWorker.py:103] - processStart Module = 38
2023-04-05 16:08:10,562 ERROR [mpl] [ActiveMPListener.py:68] - MPListener on_error = {cmd=ERROR,headers=[{'content-type': 'text/plain', 'message': 'Already connected.'}],body=org.apache.activemq.transport.stomp.ProtocolException: Already connected.
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompConnect(ProtocolConverter.java:745)
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:254)
	at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:85)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)
	at java.base/java.lang.Thread.run(Thread.java:829)
}
2023-04-05 16:11:51,613 INFO [mpl] [apps.py:13] - startService
2023-04-05 16:11:53,528 INFO [mpl] [MPLProcessWorker.py:112] - MQConnect
2023-04-05 16:14:36,803 INFO [mpl] [apps.py:13] - startService
2023-04-05 16:14:37,614 INFO [mpl] [BrokerConnect.py:53] - connect
2023-04-05 16:14:37,676 ERROR [mpl] [ActiveMPListener.py:68] - ActiveMPListener on_error = {cmd=ERROR,headers=[{'content-type': 'text/plain', 'message': 'Already connected.'}],body=org.apache.activemq.transport.stomp.ProtocolException: Already connected.
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompConnect(ProtocolConverter.java:745)
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:254)
	at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:85)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)
	at java.base/java.lang.Thread.run(Thread.java:829)
}
2023-04-05 16:15:53,836 INFO [mpl] [apps.py:13] - startService
2023-04-05 16:15:54,624 INFO [mpl] [BrokerConnect.py:53] - connect
2023-04-05 16:15:54,682 ERROR [mpl] [ActiveMPListener.py:68] - ActiveMPListener on_error = {cmd=ERROR,headers=[{'content-type': 'text/plain', 'message': 'Already connected.'}],body=org.apache.activemq.transport.stomp.ProtocolException: Already connected.
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompConnect(ProtocolConverter.java:745)
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:254)
	at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:85)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)
	at java.base/java.lang.Thread.run(Thread.java:829)
}
2023-04-05 16:16:40,940 INFO [mpl] [apps.py:13] - startService
2023-04-05 16:16:42,426 INFO [mpl] [BrokerConnect.py:53] - connect
2023-04-05 16:17:04,001 ERROR [mpl] [ActiveMPListener.py:68] - ActiveMPListener on_error = {cmd=ERROR,headers=[{'content-type': 'text/plain', 'message': 'Already connected.'}],body=org.apache.activemq.transport.stomp.ProtocolException: Already connected.
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompConnect(ProtocolConverter.java:745)
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:254)
	at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:85)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)
	at java.base/java.lang.Thread.run(Thread.java:829)
}
2023-04-05 16:17:18,861 INFO [mpl] [apps.py:13] - startService
2023-04-05 16:17:20,366 INFO [mpl] [BrokerConnect.py:53] - connect
2023-04-05 16:17:43,172 INFO [mpl] [apps.py:13] - startService
2023-04-05 16:17:44,024 INFO [mpl] [BrokerConnect.py:53] - connect
2023-04-05 16:17:58,684 INFO [mpl] [apps.py:13] - startService
2023-04-05 16:17:59,477 INFO [mpl] [BrokerConnect.py:53] - connect
2023-04-05 16:20:54,518 INFO [mpl] [apps.py:13] - startService
2023-04-05 16:20:55,251 INFO [mpl] [BrokerConnect.py:53] - connect
2023-04-05 16:20:55,303 ERROR [mpl] [ActiveMPListener.py:66] - ActiveMPListener on_error = {cmd=ERROR,headers=[{'content-type': 'text/plain', 'message': 'Already connected.'}],body=org.apache.activemq.transport.stomp.ProtocolException: Already connected.
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompConnect(ProtocolConverter.java:745)
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:254)
	at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:85)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)
	at java.base/java.lang.Thread.run(Thread.java:829)
}
2023-04-05 16:50:23,671 INFO [mpl] [apps.py:13] - startService
2023-04-05 16:51:32,604 INFO [mpl] [apps.py:13] - startService
2023-04-05 17:15:47,874 INFO [mpl] [apps.py:13] - startService
2023-04-05 17:27:32,856 INFO [mpl] [apps.py:13] - startService
2023-04-05 17:27:58,687 INFO [mpl] [MCPWorker.py:87] - Basic
2023-04-05 17:27:58,687 INFO [mpl] [MCPWorker.py:88] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:27:58,687 INFO [mpl] [MCPWorker.py:87] - StartLogic
2023-04-05 17:27:58,687 INFO [mpl] [MCPWorker.py:88] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:27:58,688 INFO [mpl] [MCPWorker.py:87] - Recipe
2023-04-05 17:27:58,688 INFO [mpl] [MCPWorker.py:88] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:27:58,688 INFO [mpl] [MCPWorker.py:87] - LotId
2023-04-05 17:27:58,688 INFO [mpl] [MCPWorker.py:88] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:27:58,688 INFO [mpl] [MCPWorker.py:87] - Slot
2023-04-05 17:27:58,688 INFO [mpl] [MCPWorker.py:88] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:27:58,689 INFO [mpl] [MCPWorker.py:87] - BasicLotInfo
2023-04-05 17:27:58,689 INFO [mpl] [MCPWorker.py:88] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:27:58,689 INFO [mpl] [MCPWorker.py:87] - LotType
2023-04-05 17:27:58,689 INFO [mpl] [MCPWorker.py:88] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:27:58,689 INFO [mpl] [MCPWorker.py:87] - MaterialId
2023-04-05 17:27:58,690 INFO [mpl] [MCPWorker.py:88] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:28:30,442 INFO [mpl] [MCPWorker.py:87] - Basic
2023-04-05 17:28:30,445 INFO [mpl] [MCPWorker.py:88] - {'EndLogic': FdcMcpEventLVResDto(id=16, name='EndLogic', event=34, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=False', returnType='Void', updateTime='2023-04-03T16:13:45.924896+09:00', orderIdx=0, isSave=True)}
2023-04-05 17:28:30,446 ERROR [mpl] [MCPWorker.py:60] - 'NoneType' object has no attribute 'isSave'
2023-04-05 17:28:30,454 ERROR [mpl] [MCPWorker.py:61] - ['  File "<string>", line 1, in <module>\n', '  File "C:\\Users\\wisol\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\spawn.py", line 120, in spawn_main\n    exitcode = _main(fd, parent_sentinel)\n', '  File "C:\\Users\\wisol\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\spawn.py", line 133, in _main\n    return self._bootstrap(parent_sentinel)\n', '  File "C:\\Users\\wisol\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\process.py", line 314, in _bootstrap\n    self.run()\n', '  File "C:\\Users\\wisol\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\process.py", line 108, in run\n    self._target(*self._args, **self._kwargs)\n', '  File "C:\\webpro\\pythonProject\\fdcmp\\mpl\\Process\\MPLProcessWorker.py", line 60, in mplPWorker\n    mplWorker.messageParser(message)\n', '  File "C:\\webpro\\pythonProject\\fdcmp\\mpl\\Process\\MPLWorker.py", line 35, in messageParser\n    self.__mcpWorker.run(self.__module, self.__context)\n', '  File "C:\\webpro\\pythonProject\\fdcmp\\mcp\\Process\\MCPWorker.py", line 61, in run\n    logger.error(traceback.format_stack())\n']
2023-04-05 17:28:54,864 INFO [mpl] [MCPWorker.py:87] - Basic
2023-04-05 17:28:54,864 INFO [mpl] [MCPWorker.py:88] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:28:54,864 INFO [mpl] [MCPWorker.py:87] - StartLogic
2023-04-05 17:28:54,865 INFO [mpl] [MCPWorker.py:88] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:28:54,865 INFO [mpl] [MCPWorker.py:87] - Recipe
2023-04-05 17:28:54,865 INFO [mpl] [MCPWorker.py:88] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:28:54,866 INFO [mpl] [MCPWorker.py:87] - LotId
2023-04-05 17:28:54,866 INFO [mpl] [MCPWorker.py:88] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:28:54,867 INFO [mpl] [MCPWorker.py:87] - Slot
2023-04-05 17:28:54,867 INFO [mpl] [MCPWorker.py:88] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:28:54,867 INFO [mpl] [MCPWorker.py:87] - BasicLotInfo
2023-04-05 17:28:54,867 INFO [mpl] [MCPWorker.py:88] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:28:54,868 INFO [mpl] [MCPWorker.py:87] - LotType
2023-04-05 17:28:54,868 INFO [mpl] [MCPWorker.py:88] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:28:56,340 INFO [mpl] [MCPWorker.py:87] - MaterialId
2023-04-05 17:28:56,340 INFO [mpl] [MCPWorker.py:88] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:28:56,341 INFO [mpl] [MCPWorker.py:87] - EndLogic
2023-04-05 17:28:56,341 INFO [mpl] [MCPWorker.py:88] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:28:56,342 ERROR [mpl] [MCPWorker.py:60] - 'NoneType' object has no attribute 'isSave'
2023-04-05 17:28:56,344 ERROR [mpl] [MCPWorker.py:61] - ['  File "<string>", line 1, in <module>\n', '  File "C:\\Users\\wisol\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\spawn.py", line 120, in spawn_main\n    exitcode = _main(fd, parent_sentinel)\n', '  File "C:\\Users\\wisol\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\spawn.py", line 133, in _main\n    return self._bootstrap(parent_sentinel)\n', '  File "C:\\Users\\wisol\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\process.py", line 314, in _bootstrap\n    self.run()\n', '  File "C:\\Users\\wisol\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\process.py", line 108, in run\n    self._target(*self._args, **self._kwargs)\n', '  File "C:\\webpro\\pythonProject\\fdcmp\\mpl\\Process\\MPLProcessWorker.py", line 60, in mplPWorker\n    mplWorker.messageParser(message)\n', '  File "C:\\webpro\\pythonProject\\fdcmp\\mpl\\Process\\MPLWorker.py", line 35, in messageParser\n    self.__mcpWorker.run(self.__module, self.__context)\n', '  File "C:\\webpro\\pythonProject\\fdcmp\\mcp\\Process\\MCPWorker.py", line 61, in run\n    logger.error(traceback.format_stack())\n']
2023-04-05 17:29:06,132 ERROR [mpl] [ActiveMPListener.py:54] - frame.body start
2023-04-05 17:29:06,132 ERROR [mpl] [ActiveMPListener.py:55] - <?xml version="1.0" encoding="utf-8" standalone="yes"?>
<message command="EAPFDC_TOOLEVENT" from="ME076" to="FDC" timestamp="2023-04-05 17:08:08" EQUIPMENT_ID="ME076" xmlns="http://http://www.wisol.co.kr/schema/eap">
  <params>
    <para name="LOT">NAHCT0290^00_MP_RECIPE|LOT|CF4_1.5_30^A^SX718BBW0F01^R7TCWLP^OP0D002010</para>
    <para name="VID">9101^9103^9001^9121^9122^9141^9131^9142</para>
    <para name="DATA">NULL^NULL^NULL^1^NAHCT0290^PM2^4^CF4_1.5_30</para>
    <para name="CEID">25102</para>
  </params>
</message>
2023-04-05 17:29:06,133 ERROR [mpl] [ActiveMPListener.py:56] - frame.body end
2023-04-05 17:29:06,133 ERROR [mpl] [ActiveMPListener.py:57] - Expecting value: line 1 column 1 (char 0)
2023-04-05 17:29:06,145 ERROR [mpl] [ActiveMPListener.py:58] - ['  File "C:\\Users\\wisol\\AppData\\Local\\JetBrains\\Toolbox\\apps\\PyCharm-P\\ch-0\\223.8214.51\\plugins\\python\\helpers\\pydev\\_pydev_bundle\\pydev_monkey.py", line 795, in __call__\n    ret = self.original_func(*self.args, **self.kwargs)\n', '  File "C:\\Users\\wisol\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\threading.py", line 995, in _bootstrap\n    self._bootstrap_inner()\n', '  File "C:\\Users\\wisol\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\threading.py", line 1038, in _bootstrap_inner\n    self.run()\n', '  File "C:\\Users\\wisol\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\threading.py", line 975, in run\n    self._target(*self._args, **self._kwargs)\n', '  File "C:\\webpro\\pythonProject\\fdcmp\\venv\\Lib\\site-packages\\stomp\\transport.py", line 341, in __receiver_loop\n    self.process_frame(f, frame)\n', '  File "C:\\webpro\\pythonProject\\fdcmp\\venv\\Lib\\site-packages\\stomp\\transport.py", line 190, in process_frame\n    self.notify(frame_type, f)\n', '  File "C:\\webpro\\pythonProject\\fdcmp\\venv\\Lib\\site-packages\\stomp\\transport.py", line 243, in notify\n    notify_func(frame)\n', '  File "C:\\webpro\\pythonProject\\fdcmp\\mpl\\Listener\\ActiveMPListener.py", line 58, in on_message\n    self.__logger.error(traceback.format_stack())\n']
2023-04-05 17:31:44,608 INFO [mpl] [MCPWorker.py:87] - Basic
2023-04-05 17:31:44,855 INFO [mpl] [MCPWorker.py:88] - {'EndLogic': FdcMcpEventLVResDto(id=16, name='EndLogic', event=34, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=False', returnType='Void', updateTime='2023-04-03T16:13:45.924896+09:00', orderIdx=0, isSave=True)}
2023-04-05 17:37:25,951 INFO [mpl] [apps.py:13] - startService
2023-04-05 17:37:45,359 INFO [mpl] [MCPWorker.py:85] - Basic
2023-04-05 17:37:45,359 INFO [mpl] [MCPWorker.py:86] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:37:45,359 INFO [mpl] [MCPWorker.py:85] - StartLogic
2023-04-05 17:37:45,360 INFO [mpl] [MCPWorker.py:86] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:37:45,360 INFO [mpl] [MCPWorker.py:85] - Recipe
2023-04-05 17:37:45,360 INFO [mpl] [MCPWorker.py:86] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:37:45,360 INFO [mpl] [MCPWorker.py:85] - LotId
2023-04-05 17:37:45,360 INFO [mpl] [MCPWorker.py:86] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:37:45,361 INFO [mpl] [MCPWorker.py:85] - Slot
2023-04-05 17:37:45,361 INFO [mpl] [MCPWorker.py:86] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:37:45,361 INFO [mpl] [MCPWorker.py:85] - BasicLotInfo
2023-04-05 17:37:45,361 INFO [mpl] [MCPWorker.py:86] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:37:45,361 INFO [mpl] [MCPWorker.py:85] - LotType
2023-04-05 17:37:45,362 INFO [mpl] [MCPWorker.py:86] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:37:45,362 INFO [mpl] [MCPWorker.py:85] - MaterialId
2023-04-05 17:37:45,362 INFO [mpl] [MCPWorker.py:86] - {'Basic': FdcMcpEventLVResDto(id=18, name='Basic', event=33, logicCode='def run(context):\n    import xml.etree.ElementTree as elemTree\n    tree = elemTree.fromstring(context.get_message())\n    datas = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'DATA\']").text.split("^")\n    ids = tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")\n    data = {}\n    for index, key in enumerate(tree[0].find("./{http://http://www.wisol.co.kr/schema/eap}para[@name=\'VID\']").text.split("^")):\n        data.setdefault(key,datas[index])\n    return data', returnType='Dict', updateTime='2023-04-05T11:05:48.077051+09:00', orderIdx=0, isSave=False), 'StartLogic': FdcMcpEventLVResDto(id=15, name='StartLogic', event=33, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=True', returnType='Void', updateTime='2023-04-04T13:26:02.528620+09:00', orderIdx=1, isSave=False), 'Recipe': FdcMcpEventLVResDto(id=17, name='Recipe', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9142"]', returnType='Void', updateTime='2023-04-04T13:25:46.790016+09:00', orderIdx=2, isSave=False), 'LotId': FdcMcpEventLVResDto(id=19, name='LotId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","Basic")["9122"]', returnType='String', updateTime='2023-04-04T13:25:43.662454+09:00', orderIdx=3, isSave=False), 'Slot': FdcMcpEventLVResDto(id=20, name='Slot', event=33, logicCode='def run(context):\n\treturn int(context.getEventValue("Start","Basic")["9131"])', returnType='Int', updateTime='2023-04-04T13:25:39.998289+09:00', orderIdx=4, isSave=False), 'BasicLotInfo': FdcMcpEventLVResDto(id=22, name='BasicLotInfo', event=33, logicCode='def run(context):\n\timport requests\n\tr = requests.get(f"http://10.20.10.114/mesapi/mes/lotInfo/?cassetteId={context.getEventValue(\'Start\',\'LotId\')}")\n\treturn r.json()', returnType='Dict', updateTime='2023-04-04T13:23:25.330588+09:00', orderIdx=5, isSave=False), 'LotType': FdcMcpEventLVResDto(id=21, name='LotType', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["lotType"]', returnType='String', updateTime='2023-04-04T14:51:57.365389+09:00', orderIdx=6, isSave=True), 'MaterialId': FdcMcpEventLVResDto(id=23, name='MaterialId', event=33, logicCode='def run(context):\n\treturn context.getEventValue("Start","BasicLotInfo")["materialId"]', returnType='String', updateTime='2023-04-04T13:25:31.767472+09:00', orderIdx=7, isSave=False)}
2023-04-05 17:38:00,733 INFO [mpl] [MCPWorker.py:85] - EndLogic
2023-04-05 17:38:00,737 INFO [mpl] [MCPWorker.py:86] - {'EndLogic': FdcMcpEventLVResDto(id=16, name='EndLogic', event=34, logicCode='def run(context):\n\tcontext.conditions["IsRun"]=False', returnType='Void', updateTime='2023-04-03T16:13:45.924896+09:00', orderIdx=0, isSave=True)}
